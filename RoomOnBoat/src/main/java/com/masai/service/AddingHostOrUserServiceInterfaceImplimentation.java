package com.masai.service;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.security.core.Authentication;
//import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.masai.exception.ApplicationException;
import com.masai.model.Host;
import com.masai.model.Users;
import com.masai.repository.HostRepository;
import com.masai.repository.UsersRepository;

import jakarta.validation.Valid;
import lombok.extern.slf4j.Slf4j;


@Service
@Slf4j
public class AddingHostOrUserServiceInterfaceImplimentation implements AddingHostOrUserServiceInterface {
	@Autowired
	private HostRepository hRepo;
	@Autowired
	private UsersRepository uRepo;
//	@Autowired
//	private PasswordEncoder pass;
	
	
	
	@Override
	public Host addHost(@Valid Host host) throws ApplicationException {
		log.info("inside addHost method of Service");
		Optional<Host> opt = hRepo.findById(host.getHostId());
		if(opt.isPresent()) {
			throw new ApplicationException("Already Exists with these credentials...");
		}
		if(host.getHostId()!=0) {
			throw new ApplicationException("Id is AutoGenerated Type Don't mention it...");
		}
		Optional<Host> opt1 = hRepo.findByEmail(host.getEmail());
		if(opt1.isPresent()) {
			throw new ApplicationException("Email Already Exists...");
		}
//		host.setPassword(pass.encode(host.getPassword()));
		hRepo.save(host);
		return host;
	}
	
	
	
	
//	::::::USER SIDE::::::
	
	@Override
	public Users addUser(Users user) throws ApplicationException{
		log.info("inside addUser method of Service");
		Optional<Users> opt = uRepo.findById(user.getUserId());
		if(opt.isPresent()) {
			throw new ApplicationException("Already Exists with these credentials...");
		}
		if(user.getUserId()!=0) {
			throw new ApplicationException("Id is AutoGenerated Type Don't mention it...");
		}
		Optional<Users> opt1 = uRepo.findByEmail(user.getEmail());
		if(opt1.isPresent()) {
			throw new ApplicationException("Email Already Exists...");
		}
//		user.setPassword(pass.encode(user.getPassword()));
		uRepo.save(user);
		return user;
	}





	




	

	
	
	
	
	
	
//	@Override
//	public Users logInUserDetails(Authentication auth) throws ApplicationException {
//		if(auth==null) {
//			throw new ApplicationException("No User Found with these Credentials");
//		} 
//		Users user = (Users) userC.loadUserByUsername(auth.getName());
//		UserId currUser = new UserId();
//		currUser.setCurrUserId(user.getUserId());
//		return user;
//	}
//	@Override
//	public Host logInHostDetails(Authentication auth) throws ApplicationException {
//		if(auth==null) {
//			throw new ApplicationException("No Host Found with these Credentials");
//		}
//		Host host = (Host) userC.loadHostByUsername(auth.getName());
//		HostId currHost = new HostId();
//		currHost.setCurrHostId(host.getHostId());
//		return host;
//	}
	
	
}
