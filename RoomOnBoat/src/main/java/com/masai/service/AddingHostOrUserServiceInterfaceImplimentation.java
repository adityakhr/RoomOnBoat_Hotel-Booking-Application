package com.masai.service;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.masai.exception.ApplicationException;
import com.masai.model.Admin;
import com.masai.model.Host;
import com.masai.model.Users;
import com.masai.repository.AdminRepository;
import com.masai.repository.HostRepository;
import com.masai.repository.UsersRepository;
import com.masai.update.LoginClass;

import jakarta.validation.Valid;
import lombok.extern.slf4j.Slf4j;


@Service
@Slf4j
public class AddingHostOrUserServiceInterfaceImplimentation implements AddingHostOrUserServiceInterface {
	@Autowired
	private HostRepository hRepo;
	@Autowired
	private UsersRepository uRepo;
	@Autowired
	private AdminRepository aRepo;
	@Autowired
	private PasswordEncoder pass;
	
	@Override
	public Host addHost(@Valid Host host) throws ApplicationException {
		log.info("Adding new Host in Service");
		Optional<Host> opt = hRepo.findById(host.getHostId());
		if(opt.isPresent()) {
			throw new ApplicationException("Already Exists with these credentials...");
		}
		if(host.getHostId()!=0) {
			throw new ApplicationException("Id is AutoGenerated Type Don't mention it...");
		}
		Optional<Host> opt1 = hRepo.findByEmail(host.getEmail());
		if(opt1.isPresent()) {
			throw new ApplicationException("Email Already Exists...");
		}
		host.setPassword(pass.encode(host.getPassword()));
		host.setEmail(host.getName().trim()+host.getLastName().trim()+"@host.com");
		hRepo.save(host);
		return host;
	}
	@Override
	public Users addUser(Users user) throws ApplicationException{
		log.info("Adding new User in Service");
		Optional<Users> opt = uRepo.findById(user.getUserId());
		if(opt.isPresent()) {
			throw new ApplicationException("Already Exists with these credentials...");
		}
		if(user.getUserId()!=0) {
			throw new ApplicationException("Id is AutoGenerated Type Don't mention it...");
		}
		Optional<Users> opt1 = uRepo.findByEmail(user.getEmail());
		if(opt1.isPresent()) {
			throw new ApplicationException("Email Already Exists...");
		}
		user.setPassword(pass.encode(user.getPassword()));
		uRepo.save(user);
		return user;
	}
	
//	@Override
//	public String logInUserDetails(LoginClass details) throws ApplicationException, AuthenticationException {
//		log.info("Checking for User in Service");
//		UsernamePasswordAuthenticationToken upat= new UsernamePasswordAuthenticationToken(details.getEmail()+":user",details.getPassword());
//		Authentication auth=authManager.authenticate(upat);
//		if(auth==null || !auth.isAuthenticated()) {
//			throw new ApplicationException("Email or Password is wrong...");
//		}
//		return auth.getName();
////		Optional<Users> user = uRepo.findByEmail(auth.getName());
////		return user.get();
//	}
//	@Override
//	public Host logInHostDetails(@Valid LoginClass details) throws ApplicationException {
//		log.info("Checking for Host in Service");
//		UsernamePasswordAuthenticationToken upat= new UsernamePasswordAuthenticationToken(details.getEmail()+":host",details.getPassword());
//		Authentication auth=authManager.authenticate(upat);
//		if(!auth.isAuthenticated()) {
//			throw new ApplicationException("Email or Password is wrong...");
//		}
//		Optional<Host> host = hRepo.findByEmail(auth.getName());
//		return host.get();
//	}
//	@Override
//	public Admin logInAdminDetails(LoginClass details) throws ApplicationException {
//		log.info("Checking for Admin in Service");
//		UsernamePasswordAuthenticationToken upat= new UsernamePasswordAuthenticationToken(details.getEmail()+":admin",details.getPassword());
//		Authentication auth=authManager.authenticate(upat);
//		if(!auth.isAuthenticated()) {
//			throw new ApplicationException("Email or Password is wrong...");
//		}
//		Optional<Admin> admin = aRepo.findByEmail(auth.getName());
//		return admin.get();
//	}

	@Override
	public Users logInUserDetails(Authentication auth) throws ApplicationException, AuthenticationException {
		log.info("Checking for User in Service");
		if(auth==null){
			throw new ApplicationException("Email or Password Might Be wrong...");
		}
		return uRepo.findByEmail(auth.getName()).get();
	}
	@Override
	public Host logInHostDetails(Authentication auth) throws ApplicationException {
		log.info("Checking for Host in Service");
		log.info("Checking for User in Service");
		if(auth==null){
			throw new ApplicationException("Email or Password Might Be wrong...");
		}
		return hRepo.findByEmail(auth.getName()).get();
	}
	@Override
	public Admin logInAdminDetails(Authentication auth) throws ApplicationException {
		log.info("Checking for Admin in Service");
		log.info("Checking for User in Service");
		if(auth==null){
			throw new ApplicationException("Email or Password Might Be wrong...");
		}
		return aRepo.findByEmail(auth.getName()).get();
	}
	
	
}
