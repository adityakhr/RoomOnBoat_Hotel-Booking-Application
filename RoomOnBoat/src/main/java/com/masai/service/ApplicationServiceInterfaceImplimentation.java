package com.masai.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.masai.exception.ApplicationException;
import com.masai.model.Booking;
import com.masai.model.Host;
import com.masai.model.Property;
import com.masai.model.Room;
import com.masai.model.User;
import com.masai.repository.BookingRepository;
import com.masai.repository.HostRepository;
import com.masai.repository.PropertyRepository;
import com.masai.repository.RoomRepository;
import com.masai.repository.UserRepository;
import lombok.extern.slf4j.Slf4j;


@Service
@Slf4j
public class ApplicationServiceInterfaceImplimentation implements ApplicationServiceInterface {
	@Autowired
	private HostRepository hRepo;
	@Autowired
	private PropertyRepository pRepo;
	@Autowired
	private UserRepository uRepo;
	@Autowired
	private BookingRepository bRepo;
	@Autowired
	private RoomRepository rRepo;
	@Autowired
	private PasswordEncoder pass;
	
	
	@Override
	public void addHost(Host host) throws ApplicationException {
		log.info("inside addHost method of Service");
		Optional<Host> opt = hRepo.findById(host.getHostId());
		if(opt.isPresent()) {
			throw new ApplicationException("Already Exists with these credentials...");
		}
		if(host.getHostId()!=0) {
			throw new ApplicationException("Id is AutoGenerated Type Don't mention it...");
		}
		if(host==null) throw new ApplicationException("Fields don't have any data");
		
		hRepo.save(host);
	}
	@Override
	public void addProperty(Property property,Integer hostId) throws ApplicationException {
		log.info("inside addProperty method of Service");
		Optional<Property> opt = pRepo.findById(property.getPropertyId());
		Optional<Host> opt1 = hRepo.findById(hostId);
		if(opt1.isEmpty()) {
			throw new ApplicationException("No Host Found with these credentials...");
		}
		if(opt.isPresent()) {
			throw new ApplicationException("Already Exists...");
		}
		if(property.getPropertyId()!=0) {
			throw new ApplicationException("Id is AutoGenerated Type Don't mention it...");
		}
		if(property==null) throw new ApplicationException("Fields don't have any data");
		property.setHost(opt1.get());
		opt1.get().getProperty().add(property);
		pRepo.save(property);
		
	}
	@Override
	public void addRoom(Room room, int propertyId) throws ApplicationException {
		log.info("inside addRoom method of Service");
		Optional<Room> opt = rRepo.findById(room.getRoomId());
		Optional<Property> opt1 = pRepo.findById(propertyId);
		if(opt1.isEmpty()) {
			throw new ApplicationException("No Property Found with these credentials...");
		}
		if(opt.isPresent()) {
			throw new ApplicationException("Already Exists...");
		}
		if(room.getRoomId()!=0) {
			throw new ApplicationException("Id is AutoGenerated Type Don't mention it...");
		}
		if(room==null) throw new ApplicationException("Fields don't have any data");
		
		room.setProperty(opt1.get());
		opt1.get().getRooms().add(room);
		rRepo.save(room);
	}
	@Override
	public void addUser( User user) throws ApplicationException{
		log.info("inside addUser method of Service");
		Optional<Host> opt = hRepo.findById(user.getUserId());
		if(opt.isPresent()) {
			throw new ApplicationException("Already Exists with these credentials...");
		}
		if(user.getUserId()!=0) {
			throw new ApplicationException("Id is AutoGenerated Type Don't mention it...");
		}
		if(user==null) throw new ApplicationException("Fields don't have any data");
		
		uRepo.save(user);
		
	}

	public void addBooking( Booking booking,int userId) throws ApplicationException {
		log.info("inside addUser method of Service");
		Optional<User> opt1 = uRepo.findById(userId);
		if(opt1.isEmpty()) {
			throw new ApplicationException("No User Found with this Id...");
		}
		Optional<Booking> opt = bRepo.findById(booking.getBookingId());
		if(opt.isPresent()) {
			throw new ApplicationException("Already Exists...");
		}
		if(booking.getBookingId()!=0) {
			throw new ApplicationException("Id is AutoGenerated Type Don't mention it...");
		}
		
		if(booking==null) {
			throw new ApplicationException("Fields don't have any data");
		}
		
		booking.setUser(opt1.get());
		opt1.get().getBookings().add(booking);
		bRepo.save(booking);
	}
	@Override
	public void deletebooking(Integer bookingId) throws ApplicationException {
		Optional<Booking> opt = bRepo.findById(bookingId);
		if(opt.isEmpty()) {
			throw new ApplicationException("No booking Found...");
		}
		bRepo.delete(opt.get());
	}
	
	
	
	
	@Override
	public User logInUserDetails(Authentication auth) throws ApplicationException {
		if(auth==null) {
			throw new ApplicationException("No User Found with these Credentials");
		}
		String email = auth.getName();
		Optional<User> user = uRepo.findByEmail(email);
		return user.get();
	}
	@Override
	public List<User> getAllUser() throws ApplicationException {
		Pageable p = PageRequest.of(0,6);
		Page<User> page= uRepo.findAll(p);
		List<User> users = page.getContent();
		if(users.size()==0) {
			throw new ApplicationException("Nothing found...");
		}
		return users;
	}
	@Override
	public List<Property> GetAllProperties() throws ApplicationException {
		Pageable p = PageRequest.of(0,6);
		Page<Property> page= pRepo.findAll(p);
		List<Property> property = page.getContent();
		if(property.size()==0) {
			throw new ApplicationException("Nothing found...");
		}
		return property;
	}
	@Override
	public List<Room> GetAllRooms() throws ApplicationException  {
		Pageable p = PageRequest.of(0,6);
		Page<Room> page= rRepo.findAll(p);
		List<Room> rooms = page.getContent();
		if(rooms.size()==0) {
			throw new ApplicationException("Nothing found...");
		}
		return rooms;
	}

}
